/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * OpenAPI spec version: 
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ContinueWith } from '../models/ContinueWith.ts';
import { Identity } from '../models/Identity.ts';
import { SettingsFlowState } from '../models/SettingsFlowState.ts';
import { UiContainer } from '../models/UiContainer.ts';
import { HttpFile } from '../http/http.ts';

/**
* This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
*/
export class SettingsFlow {
    /**
    * Active, if set, contains the registration method that is being used. It is initially not set.
    */
    'active'?: string;
    /**
    * Contains a list of actions, that could follow this flow  It can, for example, contain a reference to the verification flow, created as part of the user\'s registration.
    */
    'continue_with'?: Array<ContinueWith>;
    /**
    * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.
    */
    'expires_at': Date;
    /**
    * ID represents the flow\'s unique ID. When performing the settings flow, this represents the id in the settings ui\'s query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id>
    */
    'id': string;
    'identity': Identity;
    /**
    * IssuedAt is the time (UTC) when the flow occurred.
    */
    'issued_at': Date;
    /**
    * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
    */
    'request_url': string;
    /**
    * ReturnTo contains the requested return_to URL.
    */
    'return_to'?: string;
    'state': SettingsFlowState;
    /**
    * The flow type can either be `api` or `browser`.
    */
    'type': string;
    'ui': UiContainer;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "active",
            "baseName": "active",
            "type": "string",
            "format": ""
        },
        {
            "name": "continue_with",
            "baseName": "continue_with",
            "type": "Array<ContinueWith>",
            "format": ""
        },
        {
            "name": "expires_at",
            "baseName": "expires_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "identity",
            "baseName": "identity",
            "type": "Identity",
            "format": ""
        },
        {
            "name": "issued_at",
            "baseName": "issued_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "request_url",
            "baseName": "request_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "return_to",
            "baseName": "return_to",
            "type": "string",
            "format": ""
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "SettingsFlowState",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "ui",
            "baseName": "ui",
            "type": "UiContainer",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SettingsFlow.attributeTypeMap;
    }

    public constructor() {
    }
}



